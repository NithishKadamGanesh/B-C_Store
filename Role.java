package com.studyshare.platform.model;

import org.springframework.security.core.GrantedAuthority;

import javax.persistence.*;

/**
 * Entity representing a role in the system.
 * <p>
 * Each role is associated with a user and is used for authorization in Spring Security.
 * Implements {@link GrantedAuthority} to integrate with Spring Security.
 * </p>
 */
@Entity
@Table(name = "roles")
public class Role implements GrantedAuthority {

    /**
     * Unique identifier for the role.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name of the role, must be unique and not null.
     * This represents the authority granted to a user.
     */
    @Column(nullable = false, unique = true)
    private String name;

    /**
     * User associated with this role.
     * <p>
     * Defines a many-to-one relationship to the User entity. The fetch type is set to LAZY to optimize
     * performance by loading the associated user only when explicitly accessed.
     * </p>
     */
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id", nullable = false) // Foreign key linking to the users table
    private User user;

    /**
     * Default constructor for JPA.
     */
    public Role() {}

    /**
     * Parameterized constructor for creating a role with a name.
     *
     * @param name the name of the role.
     */
    public Role(String name) {
        this.name = name;
    }

    /**
     * Parameterized constructor for creating a role with a name and associated user.
     *
     * @param name the name of the role.
     * @param user the user associated with this role.
     */
    public Role(String name, User user) {
        this.name = name;
        this.user = user;
    }

    // Getters and Setters

    /**
     * Retrieves the unique identifier of the role.
     *
     * @return the role ID.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier for the role.
     *
     * @param id the role ID to set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Retrieves the name of the role.
     *
     * @return the role name.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the role.
     *
     * @param name the role name to set.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Retrieves the user associated with this role.
     *
     * @return the associated user.
     */
    public User getUser() {
        return user;
    }

    /**
     * Sets the user associated with this role.
     * <p>
     * Establishes a bidirectional relationship by setting this role in the user's role collection.
     * </p>
     *
     * @param user the user to associate with this role.
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Returns the authority granted by this role, required by Spring Security.
     *
     * @return the name of the role as the granted authority.
     */
    @Override
    public String getAuthority() {
        return name;
    }

    // Utility Methods

    /**
     * Provides a string representation of the Role object.
     *
     * @return a string containing role details.
     */
    @Override
    public String toString() {
        return "Role{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", user=" + (user != null ? user.getUsername() : "null") +
                '}';
    }
}
