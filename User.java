package com.studyshare.platform.model;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Entity representing a user in the system.
 * <p>
 * This class implements {@link UserDetails} to integrate with Spring Security for authentication and authorization.
 * Each user has a unique username, a password, and a collection of roles.
 * </p>
 */
@Entity
@Table(name = "users")
public class User implements UserDetails {

    /**
     * Unique identifier for the user.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique username for the user, must not be null.
     */
    @Column(unique = true, nullable = false)
    private String username;

    /**
     * Password for the user, must not be null.
     */
    @Column(nullable = false)
    private String password;

    /**
     * Roles assigned to the user, represented as a collection of Role entities.
     * <p>
     * The relationship is bidirectional and eagerly fetched to ensure roles are available during authorization checks.
     * </p>
     */
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    private Set<Role> roles = new HashSet<>();

    /**
     * Default constructor for JPA.
     */
    public User() {}

    /**
     * Parameterized constructor to initialize a user with a username and password.
     *
     * @param username the username of the user.
     * @param password the password of the user.
     */
    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    /**
     * Adds a role to the user.
     * <p>
     * Establishes the bidirectional relationship by setting this user in the role.
     * </p>
     *
     * @param role the role to add.
     */
    public void addRole(Role role) {
        roles.add(role);
        role.setUser(this);
    }

    /**
     * Removes a role from the user.
     * <p>
     * Breaks the bidirectional relationship by unsetting this user in the role.
     * </p>
     *
     * @param role the role to remove.
     */
    public void removeRole(Role role) {
        roles.remove(role);
        role.setUser(null);
    }

    /**
     * Returns the user's unique identifier.
     *
     * @return the user ID.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the user's unique identifier.
     *
     * @param id the user ID to set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the user's username.
     *
     * @return the username.
     */
    public String getUsername() {
        return username;
    }

    /**
     * Sets the user's username.
     *
     * @param username the username to set.
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Returns the user's password.
     *
     * @return the password.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the user's password.
     *
     * @param password the password to set.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Returns the roles assigned to the user.
     *
     * @return the set of roles.
     */
    public Set<Role> getRoles() {
        return roles;
    }

    /**
     * Sets the roles for the user.
     *
     * @param roles the set of roles to assign.
     */
    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }

    /**
     * Retrieves the authorities granted to the user for Spring Security.
     * <p>
     * Converts the user's roles into a collection of GrantedAuthority instances.
     * </p>
     *
     * @return a collection of GrantedAuthority instances.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return roles.stream()
                    .map(role -> (GrantedAuthority) role) // Converts each role to a GrantedAuthority
                    .collect(Collectors.toSet()); // Collects them into a set
    }

    /**
     * Indicates whether the user's account is expired.
     *
     * @return true, as the application does not handle account expiration.
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    /**
     * Indicates whether the user's account is locked.
     *
     * @return true, as the application does not handle account locking.
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    /**
     * Indicates whether the user's credentials are expired.
     *
     * @return true, as the application does not handle credential expiration.
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    /**
     * Indicates whether the user is enabled.
     *
     * @return true, as the application assumes all users are enabled.
     */
    @Override
    public boolean isEnabled() {
        return true;
    }
}
